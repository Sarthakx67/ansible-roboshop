- name: install dispatch service
  hosts: dispatch
  become: yes
  tasks:
    - name: install goLang
      ansible.builtin.yum:
        name: golang
        state: installed

    - name: check user roboshop present or not
      ansible.builtin.command: id roboshop
      register: output
      ignore_errors: true
    
    - name: create roboshop user
      ansible.builtin.user:
        name: roboshop
      when: output.rc != 0
    
    - name: check /app directory exist or not
      ansible.builtin.stat:
        path: /app
      register: directory
      ignore_errors: yes

    - name: create /app directory
      ansible.builtin.file:
        path: /app
        state: directory
      when: directory.stat.exists == false

    - name: Download dispatch artifact
      ansible.builtin.get_url:
        url: https://roboshop-builds.s3.amazonaws.com/dispatch.zip
        dest: /tmp
    
    - name: install unzip tool
      ansible.builtin.yum:
        name: unzip
        state: installed

    - name: unzip downloaded dispatch artifact
      ansible.builtin.unarchive:
        src: /tmp/dispatch.zip
        dest: /app
        remote_src: yes

    - name: go lang init 
      ansible.builtin.command: go mod init dispatch
      args: 
        chdir: /app
      ignore_errors: yes

    - name: go lang get
      ansible.builtin.command: go get
      args: 
        chdir: /app
      ignore_errors: yes
    
    - name: go lang build 
      ansible.builtin.command: go build
      args: 
        chdir: /app
      ignore_errors: yes

    - name: Set ownership of /app directory to the roboshop user
      ansible.builtin.file:
        path: /app
        owner: roboshop
        group: roboshop
        recurse: yes # Makeing sure to apply ownership to all files inside

    - name: copy dependency files
      ansible.builtin.copy:
        src: 20-dispatch.service
        dest: /etc/systemd/system/dispatch.service

    - name: daemon reload
      ansible.builtin.systemd:
        daemon_reload: true
    
    - name: start/enable dispatch
      ansible.builtin.service:
        name: dispatch
        state: restarted
        enabled: true



# # The Final Problem: Why Was the dispatch Service Failing?
# The symptom was always the same, no matter what we did manually on the server:
# Symptom: The service would start and immediately fail.
# The Error Code: systemctl status dispatch consistently showed Active: failed (Result: exit-code) and Process: ... (code=exited, status=203/EXEC).
# This 203/EXEC error was the ultimate clue. It's a systemd-specific error that means: "I found the program you asked me to run, and the permissions seem okay, but the Linux kernel itself refused to execute it."
# The Debugging Journey: Ruling Out the Obvious
# We (and you, through your excellent manual testing) correctly ruled out all the common causes:
# Was the binary file missing? No. Your ls /app command showed that the dispatch file was there.
# Was the file corrupted? No. The go build command completed successfully, creating a valid Go binary.
# Was it a file permissions issue? No. We added a task to your Ansible playbook to run chown -R roboshop:roboshop /app, which gave the roboshop user full ownership and permission to read and execute the dispatch binary.
# Was it a WorkingDirectory issue? No. We added WorkingDirectory=/app to the service file, which is a best practice, but it didn't solve the core problem.
# When all of these common issues are ruled out, the 203/EXEC error points to a deeper, more subtle problem with the execution environment.
# The True Root Cause: The "No Shell" Problem for a System User
# This was the core of the issue. Let's look at the pieces:
# The User: In our playbook, we created the roboshop user with the line ansible.builtin.user: name=roboshop system:yes. The system: yes parameter is key. It creates a system user, which is a non-interactive account designed to run services. Crucially, its default shell is set to /sbin/nologin. This is a security best practice.
# The systemd Execution: Your dispatch.service file correctly instructed systemd to run the program as the roboshop user (User=roboshop).
# The "Environment Vacuum": When systemd executes a command for a user with no login shell (/sbin/nologin), it launches that program in a highly restricted, minimal environment. There is no PATH variable set up, no terminal contextâ€”it's like launching the program in a vacuum.
# The Go runtime, and the Linux kernel's process loader, can be sensitive to this. It saw a program trying to start in this strange, context-less vacuum and, for security and stability reasons, the kernel simply refused to execute it. This is what produced the 203/EXEC error.
# The Change We Made: The "Shell Wrapper" Fix
# The solution was to stop telling systemd to run our program directly and instead tell it to run our program inside a shell.
# The Change:
# Before (The Failing Command):
# ExecStart=/app/dispatch
# After (The Working Command):
# ExecStart=/bin/bash -c /app/dispatch
# Why This Worked, in Detail:
# ExecStart=/bin/bash ...: We changed the command systemd executes. Instead of our Go program, it now runs /bin/bash, which is a standard, trusted system utility that the kernel has no problem executing.
# -c: This is a standard flag for bash that means "Command". It tells bash to take the next argument as a string and execute it as a command.
# ... /app/dispatch: This is the command string that bash runs.
# By doing this, we created a small, predictable "bubble" of a proper shell environment. The sequence of events is now:
# systemd starts the service as the roboshop user.
# It executes /bin/bash.
# bash starts up and creates a minimal, valid execution context (it knows how to handle processes, file descriptors, etc.).
# Inside this valid context, bash then executes the /app/dispatch program.
# The kernel is now happy because the Go program is being launched from a proper shell, not from the "vacuum" of a nologin user. The 203/EXEC error disappears, and the application starts successfully.
# The Final, Corrected Ansible Task
# This is the task in your final playbook that implements this fix. It creates the systemd service file with the correct, shell-wrapped command.
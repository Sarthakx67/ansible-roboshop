---
- name: installing/configuring shipping services
  hosts: shipping
  become: yes
  pre_tasks:
    - name: Ensure Python 3 and pip are installed on the target
      ansible.builtin.raw: yum install -y python3-pip
      changed_when: false
      ignore_errors: true
  tasks:
    - name: install maven as shipping service is written in java
      ansible.builtin.yum:
        name: maven
        state: present

    - name: Install python3-PyMySQL package using YUM for Ansible modules
      ansible.builtin.yum:
        name: python3-PyMySQL
        state: present

    # This user and directory setup is inefficient but functional.
    # A single 'user' task and a single 'file' task would be better.
    - name: check if roboshop user install or not
      ansible.builtin.command: id roboshop
      register: output
      ignore_errors: true

    - name: add roboshop user
      ansible.builtin.user:
        name: roboshop
        system: yes
      when: output.rc != 0

    - name: check /app directory exist or not
      ansible.builtin.stat:
        path: /app
      register: directory

    - name: create /app directory
      ansible.builtin.file:
        path: /app
        state: directory
        owner: roboshop
        group: roboshop
      when: not directory.stat.exists

    - name: download and unzip shipping artifact
      ansible.builtin.unarchive:
        src: https://roboshop-builds.s3.amazonaws.com/shipping.zip
        dest: /app
        remote_src: yes
        owner: roboshop
        group: roboshop

    # This is the correct build step. It creates /app/target/shipping-1.0.jar
    - name: Build the application artifact with Maven
      ansible.builtin.command: mvn clean package
      args:
        chdir: /app
      # This task is idempotent because Maven won't rebuild if nothing has changed.

    # --- TASK REMOVED ---
    # The confusing 'mv' task has been removed. It was creating the bad JAR file.
    # - name: installing dependencies
    #   ansible.builtin.command: mv target/shipping-1.0.jar.original shipping.jar
    #   args:
    #     chdir: /app

    # --- TASK CORRECTED ---
    # Instead of copying a file, we write the correct service content directly.
    # This ensures the ExecStart path is correct.
    - name: Create and configure the shipping systemd service
      ansible.builtin.copy:
        dest: /etc/systemd/system/shipping.service
        content: |
          [Unit]
          Description=Shipping Service

          [Service]
          User=roboshop
          # The application needs these environment variables to connect to other services.
          # You MUST provide the correct IP/DNS for your cart and mysql servers.
          Environment="CART_ENDPOINT=cart.your-domain.com:8080"
          Environment="DB_HOST=172.31.15.68"
          ExecStart=/usr/bin/java -jar /app/target/shipping-1.0.jar
          SyslogIdentifier=shipping

          [Install]
          WantedBy=multi-user.target
      notify: Reload and restart shipping service
        

    # The rest of the playbook remains the same.
    # The handler will now restart the service correctly.

    - name: install mysql to load schema to the Database
      ansible.builtin.yum:
        name: mysql
        state: present

    - name: Load the original schema into MySQL
      ansible.builtin.shell: "mysql -h 172.31.15.68 -uroboshop -pRoboShop@1 < /app/db/schema.sql"

    - name: Check if the incorrect 'cities' database exists
      community.mysql.mysql_query:
        login_user: roboshop
        login_password: "RoboShop@1"
        login_host: 172.31.15.68
        query: "SHOW DATABASES LIKE 'cities';"
      register: cities_db_check

    - name: Rename the 'cities' database to 'shipping' if it exists
      when: cities_db_check.rowcount[0] > 0
      community.mysql.mysql_query:
        login_user: roboshop
        login_password: "RoboShop@1"
        login_host: 172.31.15.68
        query:
          - "CREATE DATABASE IF NOT EXISTS shipping;"
          - "RENAME TABLE cities.cities TO shipping.cities;"
          - "DROP DATABASE cities;"

  # We use a handler to ensure the service is only reloaded/restarted when the service file changes.
  handlers:
    - name: Reload and Restart Shipping
      ansible.builtin.systemd:
        name: shipping
        state: restarted
        enabled: yes
        daemon_reload: yes
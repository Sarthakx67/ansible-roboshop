---
- name: Install and Configure Shipping Service
  hosts: shipping
  become: yes
  vars:
    mysql_host: 172.31.15.68
    cart_host: 172.31.8.30 # This should be your Cart service IP

  pre_tasks:
    - name: Ensure Python 3 is installed
      ansible.builtin.raw: yum install -y python3
      changed_when: false
      ignore_errors: true

  tasks:
    - name: Install prerequisite packages
      ansible.builtin.yum:
        name:
          - epel-release
          - maven
          - mysql
          - python3-PyMySQL
        state: present

    - name: Create Roboshop application user
      ansible.builtin.user:
        name: roboshop
        system: yes
        state: present

    - name: Ensure /app directory exists
      ansible.builtin.file:
        path: /app
        state: directory
        owner: roboshop
        group: roboshop

    - name: Download and unpack shipping artifact
      ansible.builtin.unarchive:
        src: https://roboshop-builds.s3.amazonaws.com/shipping.zip
        dest: /app
        remote_src: yes
        owner: roboshop
        group: roboshop

    - name: Build application with Maven
      ansible.builtin.command: mvn clean package
      args:
        chdir: /app

    - name: Create shipping systemd service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/shipping.service
        content: |
          [Unit]
          Description=Shipping Service

          [Service]
          User=roboshop
          Environment="CART_ENDPOINT={{ cart_host }}:8080"
          Environment="DB_HOST={{ mysql_host }}"
          Environment="DB_USER=shipping"
          Environment="DB_PASS=RoboShop@1"
          ExecStart=/usr/bin/java -jar /app/target/shipping-1.0.jar
          SyslogIdentifier=shipping

          [Install]
          WantedBy=multi-user.target
      notify: Reload and restart shipping

    # --- SIMPLIFIED DATABASE BLOCK ---

    - name: Load the application schema into MySQL
      # This creates the 'cities' database and its tables. We will NOT rename it.
      ansible.builtin.shell: "mysql -h {{ mysql_host }} -uroboshop -pRoboShop@1 < /app/db/schema.sql"
      changed_when: false
      ignore_errors: true # Ignore errors if schema already exists
    
    - name: Rename the 'cities' table to 'codes' as expected by the application
      community.mysql.mysql_query:
        login_user: roboshop
        login_password: "RoboShop@1"
        login_host: "{{ mysql_host }}"
        login_db: cities
        # This is the simple, direct rename command.
        query: "RENAME TABLE cities TO codes;"
      # We ignore errors because on the second run, this command will fail
      # saying the 'cities' table doesn't exist, which is what we want.
      ignore_errors: true"

    # --- TASKS REMOVED ---
    # All of the complex tasks for creating, checking, and renaming databases and
    # tables have been removed. We are accepting the schema as-is.

  handlers:
    - name: Reload and restart shipping
      ansible.builtin.systemd:
        name: shipping
        daemon_reload: yes
        state: restarted
        enabled: yes
---
- name: Install and Configure Shipping Service
  hosts: shipping
  become: yes
  vars:
    # Define the IP of your MySQL server here for easy changes.
    mysql_host: 172.31.15.68
    # Define the IP/DNS of your Cart service here.
    # THIS MUST BE UPDATED with your actual Cart service IP/DNS.
    cart_host: 172.31.8.30

  # This block runs first to install prerequisites Ansible needs to function.
  pre_tasks:
    - name: Ensure Python 3 is installed on the target
      ansible.builtin.raw: yum install -y python3
      changed_when: false
      ignore_errors: true

  tasks:
    - name: Install prerequisite packages (EPEL, Maven, MySQL Client, Python libs)
      ansible.builtin.yum:
        name:
          - epel-release
          - maven
          - git
          - unzip
          - mysql
          - python3-PyMySQL # The reliable way to install the required Python library
        state: present

    - name: Create the Roboshop application user
      ansible.builtin.user:
        name: roboshop
        system: yes
        state: present

    - name: Create the application directory /app
      ansible.builtin.file:
        path: /app
        state: directory
        owner: roboshop
        group: roboshop

    - name: Download and unpack the shipping application artifact
      ansible.builtin.unarchive:
        src: https://roboshop-builds.s3.amazonaws.com/shipping.zip
        dest: /app
        remote_src: yes
        owner: roboshop
        group: roboshop

    - name: Build the application with Maven
      ansible.builtin.command: mvn clean package
      args:
        chdir: /app

    - name: Create and configure the shipping systemd service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/shipping.service
        content: |
          [Unit]
          Description=Shipping Service

          [Service]
          User=roboshop
          # Environment variables are critical for the app to connect to other services.
          Environment="CART_ENDPOINT={{ cart_host }}:8080"
          Environment="DB_HOST={{ mysql_host }}"
          ExecStart=/usr/bin/java -jar /app/target/shipping-1.0.jar
          SyslogIdentifier=shipping

          [Install]
          WantedBy=multi-user.target
      notify: Reload and restart shipping

    # --- Database Schema Correction Block ---

    - name: Load the original schema into MySQL
      ansible.builtin.shell: "mysql -h {{ mysql_host }} -uroboshop -pRoboShop@1 < /app/db/schema.sql"
      changed_when: false # Loading a schema is not a configuration change in Ansible's view

    # This block renames the 'cities' database to 'shipping' but only if 'cities' exists.
    # It uses a rescue block to handle the case where the target table already exists from a partial run.
    - name: Rename 'cities' database to 'shipping' if it exists
      block:
        - name: Move the table and drop the old database
          community.mysql.mysql_query:
            login_user: roboshop
            login_password: "RoboShop@1"
            login_host: "{{ mysql_host }}"
            query:
              - "CREATE DATABASE IF NOT EXISTS shipping;"
              - "RENAME TABLE cities.cities TO shipping.cities;"
              - "DROP DATABASE cities;"
      # This 'when' condition uses a direct query to check for the 'cities' database.
      when: "lookup('community.mysql.mysql_query', 'SHOW DATABASES LIKE \\'cities\\'', login_host=mysql_host, login_user='roboshop', login_password='RoboShop@1') | length > 0"
      rescue:
        - name: Drop the redundant 'cities' database if the rename failed
          community.mysql.mysql_db:
            name: cities
            state: absent
            login_user: roboshop
            login_password: "RoboShop@1"
            login_host: "{{ mysql_host }}"

    - name: Rename the table inside 'shipping' database for clarity
      # This is the final step to get the correct table name, e.g., 'shipping_details'.
      community.mysql.mysql_query:
        login_user: roboshop
        login_password: "RoboShop@1"
        login_host: "{{ mysql_host }}"
        login_db: shipping
        # Using 'RENAME TABLE IF EXISTS' makes this query itself idempotent.
        query: "RENAME TABLE IF EXISTS cities TO shipping_details;"

  # Handlers are only run if a task "notifies" them. This is efficient.
  handlers:
    - name: Reload and restart shipping
      ansible.builtin.systemd:
        name: shipping
        daemon_reload: yes
        state: restarted
        enabled: yes
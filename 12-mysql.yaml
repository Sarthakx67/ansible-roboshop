- name: install/configure mysql
  hosts: mysql
  become: yes
  pre_tasks:
    - name: Ensure Python 3 and pip are installed on the target
      ansible.builtin.raw: yum install -y python3-pip
      changed_when: false
      ignore_errors: true
  tasks: 
    - name: install extra packages for enterprise linux
      ansible.builtin.yum:
        name: epel-release
        state: installed  

    # Install PyMySQL using YUM.
    - name: Install python3-PyMySQL package using YUM
      ansible.builtin.yum:
        name: python3-PyMySQL
        state: present

    - name: Temporarily set SELinux to permissive mode
      ansible.builtin.command: setenforce 0

    - name: Remove conflicting mysql/mariadb packages
      ansible.builtin.yum:
        name:
          - mysql
          - mysql-server
          - mysql-libs
          - mysql-common
          - mariadb
          - mariadb-libs
          - mariadb-connector-c-config
        state: absent
        autoremove: yes # Remove any unused dependencies as well
      ignore_errors: yes # Ignore errors if a package is already removed

    - name: disable mysql-8 default module
      ansible.builtin.command: yum module disable mysql -y 
      changed_when: false

    - name: copy MySQL 5.7 Server 
      ansible.builtin.copy:
        src: 13-mysql.repo
        dest: /etc/yum.repos.d/mysql.repo

    - name: install mysql
      ansible.builtin.command: yum install mysql-community-server -y
    
    - name: enable/start mysql
      ansible.builtin.service:
        name: mysqld
        enabled: true
        state: restarted

    - name: Get the initial temporary root password
      ansible.builtin.shell: "grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'"
      register: temp_mysql_password
      changed_when: false
      ignore_errors: yes

    # Install the Python library that the 'mysql_user' module requires 
    - name: Install PyMySQL library on the target node
      ansible.builtin.pip:
        name: PyMySQL
        executable: pip3 

    - name: Set the new root password using a raw SQL query
      when: temp_mysql_password.stdout != ""
      community.mysql.mysql_query:
        login_user: root
        login_password: "{{ temp_mysql_password.stdout }}"
        query: "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RoboShop@1';"

    # A task to verify the new password
    - name: Verify that the new root password is valid
      community.mysql.mysql_query:
        login_user: root
        login_password: "RoboShop@1" # Use the NEW password
        query: "SELECT 1;"
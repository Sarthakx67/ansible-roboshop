---
- name: Install and Configure MySQL 5.7 on EL8
  hosts: mysql
  become: yes
  tasks:
    - name: Check if the MySQL root password is already set
      ansible.builtin.command: mysql -u root -p"RoboShop@1" -e "SELECT 1;"
      register: mysql_password_check
      ignore_errors: true
      changed_when: false

    - name: Run MySQL setup only if not already configured
      when: mysql_password_check.rc != 0
      block:
        - name: Ensure Python 3 is installed on the target
          ansible.builtin.raw: yum install -y python3
          changed_when: false
          ignore_errors: true

        - name: Install EPEL and PyMySQL using YUM
          ansible.builtin.yum:
            name:
              - epel-release
              - python3-PyMySQL
            state: present

        - name: Set SELinux to permissive mode permanently
          ansible.posix.selinux:
            policy: targeted
            state: permissive

        - name: Remove conflicting mysql and mariadb packages
          ansible.builtin.yum:
            name:
              - mysql
              - mysql-server
              - mysql-libs
              - mysql-common
              - mariadb
              - mariadb-libs
              - mariadb-connector-c-config
            state: absent
            autoremove: yes
          ignore_errors: yes

        - name: Disable mysql-8 default module
          ansible.builtin.command: yum module disable mysql -y
          changed_when: false

        - name: copy MySQL 5.7 Server 
          ansible.builtin.copy:
            src: 13-mysql.repo
            dest: /etc/yum.repos.d/mysql.repo

        - name: install mysql
          ansible.builtin.command: yum install mysql-community-server -y

        - name: Start and enable the mysqld service
          ansible.builtin.service:
            name: mysqld
            state: restarted
            enabled: true

        - name: Find the line containing the temporary root password
          ansible.builtin.lineinfile:
            path: /var/log/mysqld.log
            regexp: 'A temporary password is generated for root@localhost'
            state: present
          register: temp_password_line
          changed_when: false
          ignore_errors: yes

        - name: Set the new root password using the mysql command-line client
          when: temp_password_line.found
          ansible.builtin.shell: >
            mysql -u root --password='{{ temp_password_line.line | regex_search(': (.*)') | regex_replace(': ', '') }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RoboShop@1';"

    - name: Create the 'roboshop' application user for remote access
      community.mysql.mysql_user:
        name: roboshop
        host: '%'
        password: "RoboShop@1"
        priv: '*.*:ALL,GRANT'
        state: present
        login_user: root
        login_password: "RoboShop@1"

    - name: Create the 'shipping' application user for the Shipping service
      community.mysql.mysql_user:
        name: shipping
        host: '%'
        password: "RoboShop@1"
        priv: '*.*:ALL,GRANT'
        state: present
        login_user: root
        login_password: "RoboShop@1"


# # Here is a detailed breakdown of all the problems we faced with the MySQL setup and the changes we made to fix them.
# Initial State: A Flawed Approach
# Initially, your playbook for MySQL was trying to use a method that is common in tutorials but is very fragile in the real world:
# Generated yaml
# # This was the original, problematic method
# - name: copy MySQL 5.7 Server
#   ansible.builtin.copy:
#     src: 13-mysql.repo
#     dest: /etc/yum.repos.d/mysql.repo

# - name: install mysql
#   ansible.builtin.command: yum install mysql-community-server -y
# Use code with caution.
# Yaml
# This led to a cascade of failures.
# Problem 1: All matches were filtered out by modular filtering
# Symptom: The yum install command failed immediately, stating that the package was being filtered by the OS's modularity system.
# Root Cause: The 13-mysql.repo file you were copying was for Enterprise Linux 7, but you were running on an Enterprise Linux 8 system. EL8 has a built-in mysql module (version 8.0) and correctly refused to install an incompatible package from an old repository.
# The Fix (Change #1 - Correct Repository Method): We completely abandoned the copy task. The correct, modern method is:
# Disable the OS Module: We added a task to run yum module disable mysql -y. This tells the system to ignore its built-in MySQL 8.0 and allow us to install a different version.
# Install the Official Repo RPM: We added a yum task to install the official repository configuration directly from MySQL's website: yum install https://dev.mysql.com/get/mysql57-community-release-el8-*.rpm. This RPM is specifically built for EL8 and correctly sets up the repositories for all available MySQL versions.
# Problem 2: file ... conflicts with file from package mariadb...
# Symptom: Even after trying to fix the repo, the installation would fail with a Transaction test error, complaining about file conflicts with a mariadb package (like mariadb-connector-c-config).
# Root Cause: A fresh EL8 server comes with some mariadb (a MySQL fork) packages pre-installed. These packages owned files (like /etc/my.cnf) that the new MySQL installation also wanted to own. yum correctly prevents this to avoid corrupting the system.
# The Fix (Change #2 - Thorough Cleanup): We added a comprehensive cleanup task at the beginning of the playbook to remove all potentially conflicting packages. This gives us a clean slate before we install.
# Generated yaml
# - name: Remove conflicting mysql and mariadb packages
#   ansible.builtin.yum:
#     name:
#       - mysql
#       - mariadb
#       - mariadb-libs
#       - mariadb-connector-c-config
#     state: absent
# Use code with caution.
# Yaml
# Problem 3: Could not find the requested service mysqld
# Symptom: The task to start the mysqld service failed.
# Root Cause: This was a direct consequence of Problem #2. The yum install command had failed, so the mysql-community-server package was never actually installed, which meant the mysqld.service file was never created.
# The Fix: This was automatically solved by fixing Problem #2. Once the cleanup task allowed the installation to succeed, the service file was created, and this error disappeared.
# Problem 4: Access denied for user 'root'@'localhost' (Password Problems)
# Symptom: After a successful installation, we couldn't log in with the password RoboShop@1.
# Root Cause: The mysql_secure_installation command from the original instructions is outdated and doesn't work reliably for setting the initial password. The server had actually generated a random temporary password and stored it in /var/log/mysqld.log.
# The Fix (Change #3 - Robust Password Management): We replaced the single mysql_secure_installation command with a two-step, robust process:
# Find the Password: We added a shell task to grep the log file for the temporary password and register it as a variable (temp_mysql_password).
# Set the Password: We added a second shell task to use the mysql command-line client with the temporary password to execute the ALTER USER command, which correctly sets the new password. This also handled the "password expired" and "special characters in password" issues we encountered.
# Problem 5: Access denied for user 'shipping'@... (Application User)
# Symptom: The Shipping application was failing to connect to the database.
# Root Cause: The application was hard-coded to connect as the user shipping, but we had only created a generic roboshop user.
# The Fix (Change #4 - Create Application-Specific User): We added a task to the MySQL playbook using the community.mysql.mysql_user module to explicitly create the shipping user and grant it the necessary permissions. This ensures the database is ready for the application that will connect to it.
# Summary of Changes to the MySQL Playbook
# Original Flawed Method	Final Robust Method	Reason for Change
# Copying a .repo file for EL7.	Removing all conflicting mariadb packages, then using yum module disable, then installing the official MySQL EL8 repository RPM.	Solved modularity errors and file conflicts by using the correct, OS-compatible installation method.
# Using mysql_secure_installation --set-root-pass ....	Using grep to find the temporary password from the logs, then using the mysql shell command with ALTER USER to set the new password.	Solved all password-related issues (Access denied, password expired, special characters) in a reliable, atomic way.
# Creating a generic roboshop user.	Creating specific users that the applications need (roboshop and shipping), and granting them appropriate privileges.	Solved the "Access denied for user 'shipping'..." error by providing the exact user the application expected.
# Simple yum install task.	A full playbook with a preceding "check" task and a when block to make the entire setup process idempotent (skippable on re-runs).	Prevents unnecessary changes and errors on subsequent runs, making the automation production-ready.